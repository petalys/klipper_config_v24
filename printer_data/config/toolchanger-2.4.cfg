[delayed_gcode T0_HO_OFF]
initial_duration: 0 
gcode:  

  {% if printer['gcode_macro PRINT_START'].printing %} 
  M104 T0 S150
  {% endif %}

[delayed_gcode T1_HO_OFF]
initial_duration: 0 
gcode:  
  {% if printer['gcode_macro PRINT_START'].printing %} 
  M104 T1 S150
  {% endif %}

[delayed_gcode T2_HO_OFF]
initial_duration: 0 
gcode:  
  {% if printer['gcode_macro PRINT_START'].printing %} 
  M104 T2 S150
  {% endif %}

[delayed_gcode T3_HO_OFF]
initial_duration: 0 
gcode:  
  {% if printer['gcode_macro PRINT_START'].printing %} 
  M104 T3 S150
  {% endif %}

[delayed_gcode T4_HO_OFF]
initial_duration: 0 
gcode:  
  {% if printer['gcode_macro PRINT_START'].printing %} 
  M104 T4 S150
  {% endif %}


[gcode_macro MY_LAYER_CHANGE]
gcode:
  #M117 stub


  {% set current_tool= printer.tool_probe_endstop.active_tool_number | int %}

  {% set next_layer_num = params.LAYER_NUM|int %} 

  {% set prev_layer_num = params.LAYER_NUM|int -1 %} 
  
  {% if current_tool == 0 %}
    SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t0 VALUE={ next_layer_num}
  {% endif %}
  {% if current_tool == 1 %}
    SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t1 VALUE={ next_layer_num }
  {% endif %}
  {% if current_tool == 2 %}
    SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t2 VALUE={ next_layer_num }
  {% endif %}
  {% if current_tool == 3 %}
    SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t3 VALUE={ next_layer_num }
  {% endif %}
  {% if current_tool == 4 %}
    SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t4 VALUE={ next_layer_num }
  {% endif %}

  
  {% set last_layer_t0 =  printer['gcode_macro MY_TOOL_CHANGE'].last_layer_t0|int %}
  {% set last_layer_t1 =  printer['gcode_macro MY_TOOL_CHANGE'].last_layer_t1|int %}
  {% set last_layer_t2 =  printer['gcode_macro MY_TOOL_CHANGE'].last_layer_t2|int %}
  {% set last_layer_t3 =  printer['gcode_macro MY_TOOL_CHANGE'].last_layer_t3|int %}
  {% set last_layer_t4 =  printer['gcode_macro MY_TOOL_CHANGE'].last_layer_t4|int %}


  {% if last_layer_t0 != prev_layer_num   and layer_num != -1  and current_tool != 0 %}
#
      M104 T0 S0 
  {% endif %}
  {% if last_layer_t1 != prev_layer_num   and layer_num != -1   and current_tool != 1 %}
     # RESPOND MSG="T1 Off"
      M104 T1 S0 
  {% endif %}
  {% if last_layer_t2 != prev_layer_num   and layer_num != -1   and current_tool != 2 %}
   #   RESPOND MSG="T2 Off"
      M104 T2 S0 
  {% endif %}
  {% if last_layer_t3 != prev_layer_num   and layer_num != -1   and current_tool != 3 %}
   #   RESPOND MSG="T3 Off"
      M104 T3 S0 
  {% endif %}
  {% if last_layer_t4 != prev_layer_num   and layer_num != -1   and current_tool != 4 %}
   #   RESPOND MSG="T3 Off"
      M104 T4 S0 
  {% endif %}

[gcode_macro RESET_NO_CRASH_COUNTER]
gcode:
  SAVE_VARIABLE VARIABLE=total_changes_no_crash VALUE="0"

  
[gcode_macro RESET_CHANGE_COUNTERS]
gcode:
  SAVE_VARIABLE VARIABLE=total_changes_no_crash VALUE="0"
  SAVE_VARIABLE VARIABLE=total_changes VALUE="0"


[gcode_macro MY_TOOL_CHANGE]
variable_tool_change_count: 0 
variable_last_layer_t0:-1
variable_last_layer_t1:-1
variable_last_layer_t2:-1
variable_last_layer_t3:-1
variable_last_layer_t4:-1
gcode:

  
  {% if printer.save_variables.variables.total_changes is defined %}
  {% set total_changes=printer.save_variables.variables.total_changes|int  %}
  {% set total_changes = total_changes+1 %}
  {% else %}
  {% set total_changes=0 %}
  {% endif %}

  SAVE_VARIABLE VARIABLE=total_changes VALUE="{total_changes}"

  {% if printer.save_variables.variables.total_changes_no_crash is defined %}
  {% set total_changes_no_crash=printer.save_variables.variables.total_changes_no_crash|int  %}
  {% set total_changes_no_crash = total_changes_no_crash+1 %}
  {% else %}
  {% set total_changes_no_crash=0 %}
  {% endif %}

  SAVE_VARIABLE VARIABLE=total_changes_no_crash VALUE="{total_changes_no_crash}"

  #RESPOND MSG="TOTAL CHANGES {total_changes} NOCRASH  {total_changes_no_crash} " 

  {% set my_counter = printer['gcode_macro MY_TOOL_CHANGE'].tool_change_count  %}
  M117 Tool Change: { my_counter }  /  {printer['gcode_macro PRINT_START'].total_tool_changes} ( NoCrash: {total_changes_no_crash} / {total_changes})
  {% set my_counter =my_counter+1  %}
  
  SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=tool_change_count VALUE={ my_counter }
  
    {% set prev_tn = "T"+  params.PREVIOUS_TOOL  %} 
    {% set next_tn = "T"+  params.NEXT_TOOL  %} 
    {% set layer_num = params.LAYER_NUM  %}  
    {% if layer_num == "-1" %}
    {% set layer_num="1" %}
    {% endif %}
    {% set fan_speed =  printer["gcode_macro M106"].fan_speed %}

  #SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_{next_tn} VALUE={ params.LAYER_NUM }


   # UPDATE_DELAYED_GCODE ID={ next_tn }_HO_OFF  DURATION=0 
    

    #RESPOND MSG="MY TOOL CHANGE:  { prev_tn  } => {next_tn }  "
    #RESPOND MSG="FAN SPEED = {fan_speed}"  
    #RESPOND MSG="LAYER NUM = {layer_num}"  
    {% if prev_tn != 'T-1' %}
     # UPDATE_DELAYED_GCODE ID={ prev_tn }_HO_OFF DURATION=300 
      SET_FAN_SPEED FAN={prev_tn}_partfan SPEED=0
    {% endif %}
  
      {% if prev_tn =='T0' and printer["gcode_macro PRINT_START"].t0_temp > 50 %}
        M104 {prev_tn} S{printer["gcode_macro PRINT_START"].t0_temp - 50} 
      {% endif %}

      {% if prev_tn =='T1'  and printer["gcode_macro PRINT_START"].t1_temp > 50  %}
        M104 {prev_tn} S{printer["gcode_macro PRINT_START"].t1_temp - 50} 
      {% endif %}

      {% if prev_tn =='T2'  and printer["gcode_macro PRINT_START"].t2_temp > 50  %}
        M104 {prev_tn} S{printer["gcode_macro PRINT_START"].t2_temp - 50} 
      {% endif %}

      {% if prev_tn =='T3'  and printer["gcode_macro PRINT_START"].t3_temp > 50  %}
        M104 {prev_tn} S{printer["gcode_macro PRINT_START"].t3_temp - 50} 
      {% endif %}

      {% if prev_tn =='T4'  and printer["gcode_macro PRINT_START"].t4_temp > 50  %}
        M104 {prev_tn} S{printer["gcode_macro PRINT_START"].t4_temp - 50} 
      {% endif %}

      {% if next_tn =='T0' %}
        M104 {next_tn} S{printer["gcode_macro PRINT_START"].t0_temp} 
        SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t0 VALUE={ layer_num }  
      {% endif %}

      {% if next_tn =='T1' %}
        M104 {next_tn} S{printer["gcode_macro PRINT_START"].t1_temp} 
        SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t1 VALUE={ layer_num }  
      {% endif %} 
      
      {% if next_tn =='T2' %}
        M104 {next_tn} S{printer["gcode_macro PRINT_START"].t2_temp} 
        SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t2 VALUE={ layer_num }  
      {% endif %} 
      
      {% if next_tn =='T3' %}
       M104 {next_tn} S{printer["gcode_macro PRINT_START"].t3_temp} 
        SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t3 VALUE={ layer_num }  
      {% endif %} 

      {% if next_tn =='T4' %}
       M104 {next_tn} S{printer["gcode_macro PRINT_START"].t4_temp} 
        SET_GCODE_VARIABLE MACRO=MY_TOOL_CHANGE VARIABLE=last_layer_t4 VALUE={ layer_num }  
      {% endif %} 
      
[toolchanger]
  t_command_restore_axis: z
  params_safe_y: 120
  params_close_y: 80
  params_fast_speed:   8000 # Default is slow moves, change this to go as Go as fast as we can
  params_path_speed:  2000 #4000 # Move speed for for the actual change 1500=40mm/s, increase this to go as fast as you can
  params_type = 'rods_mini_hookon'   # See available paths below
  # The dropoff path of each tool type, pickup path is the same in reverse.
  params_pads_mini_path: [{'y':9 ,'z':2}, {'y':8, 'z':0}, {'y':0, 'z':0, 'f':0.5},{'y':0, 'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7,'z':-11}]
  params_pads_sb_path: [{'y':9.5 ,'z':8}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'y':0, 'z':0, 'f':0.5},{'y':0, 'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7,'z':-11}]
  params_rods_mini_path: [{'z':0, 'y':4}, {'z':0, 'y':0, 'f':0.5}, {'z':-6, 'y':0}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
  params_rods_sb_path: [{'y':9.5 ,'z':8}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-6, 'y':0}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
  params_rods_mini_hookon_path: [{'z':0, 'y':4}, {'z':0, 'y':0, 'f':0.5}, {'z':-7.3, 'y':0}, {'z':-12.3, 'y':3.5}, {'z':-12.3, 'y':16}]
  params_rods_xol_path: [{'y':59, 'z':17.5},{'y':5, 'z':17.5},{'y':5, 'z':0.2},{'y':0.5, 'z':0.1},{'z':0, 'y':0, 'f':0.5},{'z':-5, 'y':0},{'z':-6, 'y':3},{'z':-8, 'y':7},{'z':-10, 'y':16}]
  # Parking position - per tool
  #params_park_x = 142.2
  #params_park_y = -6.0
  #params_park_z = 308.2
  # Default shaper params
  #params_input_shaper_type_x: 'mzv'
  #params_input_shaper_freq_x: 62.4
  #params_input_shaper_damping_ratio_x: 0.043
  #params_input_shaper_type_y: 'mzv'
  #params_input_shaper_freq_y: 88.6
  #params_input_shaper_damping_ratio_y: 0.042
  initialize_on: first-use
  uses_axis: xyz
  on_axis_not_homed: home
  initialize_gcode:
    DETECT_ACTIVE_TOOL_PROBE
    _INITIALIZE_FROM_DETECTED_TOOL

  before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}



  after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    
    ### load Input Shaper frequency, type and damping ratio 
    ### (if none or some params_input_shaper_* are set in tool, use default input_shaper_params)
    {% if tool.params_input_shaper_freq_x and tool.params_input_shaper_freq_y %}
      {% if tool.params_input_shaper_type_x and tool.params_input_shaper_type_y %}
        {% if tool.params_input_shaper_damping_ratio_x and tool.params_input_shaper_damping_ratio_y %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y}
        {% else %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
        {% endif %}
      {% else %}
        SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
      {% endif %}
    {% else %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={params_input_shaper_freq_x} SHAPER_FREQ_Y={params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
    {% endif %}
    {% if not printer['gcode_macro PRINT_START'].printing %}
        STOP_TOOL_PROBE_CRASH_DETECTION
    {% endif %}

  dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    {% set tn = "T"+(tool.tool_number|string) %}
    

    STOP_TOOL_PROBE_CRASH_DETECTION
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    #  ############## Run the path ##############
    {% for pos in path %}
        G0 Y{y + pos['y']|float} Z{z + pos['z']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}

  pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set tn = "T"+(tool.tool_number|string) %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
 
    {% if printer['gcode_macro PRINT_START'].printing %} 
   
      SET_FAN_SPEED FAN={tn}_partfan SPEED={ printer["gcode_macro M106"].fan_speed } 
      {% if tn =='T0' %} 
        TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer["gcode_macro PRINT_START"].t0_temp -20 }
      {% endif %}
      {% if tn =='T1' %}
        TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer["gcode_macro PRINT_START"].t1_temp -20 }
      {% endif %} 
      {% if tn =='T2' %}
        TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer["gcode_macro PRINT_START"].t2_temp -20 }
      {% endif %} 
      {% if tn =='T3' %}
        TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer["gcode_macro PRINT_START"].t3_temp -20 }
      {% endif %} 
      {% if tn =='T4' %}
        TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer["gcode_macro PRINT_START"].t4_temp -20 }
      {% endif %} 
    {% endif %} 
    

    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    ROUNDED_G0 X={x} Z={z + path[-1]['z']|float} F={fast} D=5
    ROUNDED_G0 Y={y + path[-1]['y']|float} F={fast} D=0



    # Run the path in reverse
    {% for pos in path|reverse %}
      G0 Y{y + pos['y']|float} Z{z + pos['z']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
      {% if 'f' in pos %} # Use the f presence as marker that we have made contact with the tool.
        M400 ; Wait for moves to finish
        START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}
      {% endif %}
    {% endfor %}
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
    {% if 'Z' in restore_position %}
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
    {% endif %}
    ROUNDED_G0 D=0

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
    RESPOND TYPE=error MSG='Failed to detect active tool'
    PAUSE
  {% else %}
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
  {% endif %}

[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    {% set curpos = printer.gcode_move.gcode_position %}
    SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
    SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
    SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}


#[gcode_macro M109]
#rename_existing: M109.1
#description: [T<index>] [S<temperature>]
#  Set tool temperature and wait.
#  T= Tool number, optional. If this parameter is not provided, the current tool is used.
#  S= Target temperature
#gcode:
#  {% if params.T is defined %}
#    {% set newparameters = " T="~params.T %}
#    {% if params.S is defined %}
#      {% set newparameters = newparameters ~ " TARGET="~params.S %}
#    {% endif %}
#    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
#  {% else %}
#    M109.1 {rawparams}
#  {% endif %}

[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
  D= Dead-band, allows the temperature variance +/- the deadband
variable_default_deadband: 4.0
gcode:
    {% set s = params.S|float %}
    {% set deadband = default_deadband|float %}
    {% if params.D is defined %}
        {% set deadband = params.D|float %}
    {% endif %}
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
    {% set extruder = printer[tool].extruder %}

    SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
    {% if s > 0 %}
        TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for hotend temp (within D degrees)
    {% endif %}


[gcode_macro M106]  
variable_fan_speed:0
gcode:
    {% set fan_speed = (params.S|float)/255 %}
    {% set tool = printer[printer.toolchanger.tool] %} 
  #  RESPOND MSG=" MY_M106  tool={ tool.tool_number} , speed={speed} " 
    
    SET_FAN_SPEED FAN=T{tool.tool_number}_partfan SPEED={fan_speed}  
    
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fan_speed VALUE={fan_speed}


[gcode_macro M107]   
gcode:
    {% set fan_speed = 0 %}
    {% set tool = printer[printer.toolchanger.tool] %} 
  #  RESPOND MSG=" MY_M106  tool={ tool.tool_number} , speed={speed} " 
    
    SET_FAN_SPEED FAN=T{tool.tool_number}_partfan SPEED={fan_speed}  
    
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fan_speed VALUE={fan_speed}